 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var request = require('request');
var mongoose = require('mongoose');

var Search = require("./models/search");
var GoogleImageSearch = require("./google-image-search");

var search_options = GoogleImageSearch.options;

var app = express();

mongoose.connect(process.env.DB_URL)

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
      res.sendFile(process.cwd() + '/views/index.html');
    });

app.get('/api/imagesearch/:keyword', function(req, res) {
  var searchKeyword = req.params.keyword;
  var offset = req.query.offset | 20;
  var images = [];
  
  Search.create({term: searchKeyword}, function(err, searchDoc) {
    if (err) throw new Error("Database malfunction!");
    
    GoogleImageSearch.searchAndServeImages(searchKeyword, offset, res);
  });
});

app.get("/api/latest/imagesearch", function(req, res) {
  var recentSearches = [];
  
  Search.find({}, {_id: false, __v: false}, function(err, searchDocs) {
    if (err) throw new Error("Database malfunction!");
    
    searchDocs.forEach(function(doc) {
      if (GoogleImageSearch.searchedToday(doc)) {
        recentSearches.push(doc);
      }
    });
    
    res.json(recentSearches);
  });
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});