 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var mongo = require('mongodb').MongoClient;
var request = require('request');

var GoogleImageSearch = require("./google-image-search");
var search_options = GoogleImageSearch.options;

var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
      res.sendFile(process.cwd() + '/views/index.html');
    });

app.get('/api/imagesearch/:keyword', function(req, res) {
  var searchKeyword = req.params.keyword;
  
  mongo.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASS + "@ds141232.mlab.com:41232/urls", function(err, db) {
    if (err) {
      console.log(err);
    }
    db.collection("searches").insert({term: searchKeyword, when: new Date(Date.now())}, function(err) {
      if (err) {
        return console.log(err);
      }
      
      db.close();
    })
  });
  
  var offset = req.query.offset;
  
  search_options.url = GoogleImageSearch.getSearchURL(searchKeyword);
  
  var images = [];
  
  request(search_options, function(err, response, body) {
    if (err) {
      console.log(err);
    }

    GoogleImageSearch.getResults(body, function(err, results) {
      if (err) {
        return console.log(err);
      }

      for (var i = 0; i < results.length; i++) {
        var obj = {};
        obj.url = results[i].ou;
        obj.snippet = results[i].pt;
        obj.thumbnail = results[i].tu;
        obj.context = results[i].ru;
        images.push(obj);
        if (offset && images.length === offset-1) {
          break;
        }
      }
      res.json(images);
    });
  });
});

app.get("/api/latest/imagesearch", function(req, res) {
  var searches = [];
  mongo.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASS + "@ds141232.mlab.com:41232/urls", function(err, db) {
    if (err) {
        console.log(err);
    }
    db.collection("searches").find({}, {_id: 0}).toArray(function(err, docs) {
      if (err) {
        return console.log(err);
      }

      db.close();
      
      docs.forEach(function(doc) {
        if (new Date(doc.when).toDateString() === new Date(Date.now()).toDateString()) {
          searches.push(doc);
        }
      });
      
      res.json(searches);
    });
  });
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});